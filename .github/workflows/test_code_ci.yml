# Action명, 커스텀 가능하다
name: Test Code CI

# 이벤트 감지
# 아래의 명령어는 모든 브랜치에 한해서 PR감지 (브랜치 지정할 수 있음)
on: 
    pull_request:
        branches: [feature/ci]
  

# 작업단위. 실질적인 github action이 실행되는 곳
jobs:
    build:  # 작업의 이름. 커스텀 가능하다.
        runs-on: ubuntu-latest  # 가상머신 OS 설정. 버전설정, window, MacOS도 사용할 수 있다.
        services:  # 서비스할 목록들 (ex. Redis, Postgresql ...)
            mysql:   # 사용할 서비스 명
                image: mysql:5.7  # 사용할 서비스의 이미지(도커 개념 기반)
                env:   # 사용할 서비스의 환경설정
                    MYSQL_USER: test
                    MYSQL_PASSWORD: test
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: ywc
                ports: # 열어줄 포트, 8080:3306 형태로도 가능
                    - 3306
                options: >-  # 서비스에 걸어줄 옵션
                    --health-cmd="mysqladmin ping"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=3

        strategy:  # 가상머신 안에서 사용할 작업환경
            matrix:
                node-version: [14.x]  # node 12버전을 적용해서 action (타버전 적용가능)
        steps:  # 실질적인 작업 순서를 정하는 곳
            - uses: actions/checkout@v2  # 사용할 액션을 정의하는 곳
            - name: Use Node.js $ # 사용할 액션의 이름을 정의
              uses: actions/setup-node@v1 # node 액션을 사용할 것이다.
              with:  # 액션에 필요한 파라미터들을 쓰는 곳
                  node-version: $ # 위의 strategy에 적용한 노드의 버전을 액션에서 가져온다.
            - name: MySQL connection
              # 아래는 실행문, cli에 입력하듯이 명령어를 작성하면 된다.
        run: |
              mysql --version
              sudo apt-get install -y mysql-client
              sudo service mysql start
              mysql -uroot -proot -e "CREATE DATABASE ywc"
              mysql -uroot -proot -e "SHOW DATABASES"
            - name: Make .env file  # 새로운 액션의 이름
              uses: SpicyPizza/create-envfile@v1  # .env파일을 만들어주는 액션
              with:  # .env에 들어갈 값
          # 아래의 $는 레포지토리 secret에 저장해놓은 값을 사용
          # $은 위에서 설정한 값을 가져와서 3306과 매칭되는 포트값을 넣는 것
                  envkey_MYSQL_HOST: $
                  envkey_MYSQL_PORT: $
                  envkey_MYSQL_USERNAME: $
                  envkey_MYSQL_PASSWORD: $
                  envkey_MYSQL_SCHEMA: $
                  envkey_APP_NAME: $
                  envkey_APP_PORT: $
                  envkey_APP_CORS_ORIGINS: $
                  envkey_APP_WEB_URL: $
            - name: install node modules && test # 테스트를 돌릴 액션
              run: |
                  sudo service mysql restart
                  npm install
                  npm test
              env: # 테스트시 필요한 환경설정
                  CI: true # 지금 액션이 CI인 것을 명시
          # 아래는 데이터베이스 환경 설정
                  MYSQL_SCHEMA: $
                  MYSQL_USERNAME: $
                  MYSQL_PASSWORD: $
                  MYSQL_PORT: $
            - name: if fail  # 만약 실패했을 때의 설정
              uses: actions/github-script@v3  # 커스텀 스크립트를 사용하게 해주는 액션
              with:  # 커스텀 스크립트 작성란
                  github-token: $  # 깃허브 토큰으로 PR을 close시킴
                  script: |
                      const ref = "$"
                      const pull_number = Number(ref.split("/")[2])
                      await github.pulls.createReview({
                        ...context.repo,
                        pull_number,
                        body:"테스트코드를 다시 확인해주세요. ",
                        event: "REQUEST_CHANGES"
                      })
                      await github.pulls.update({
                        ...context.repo,
                        pull_number,
                        state: "closed"
                      })
              if: failure()  # 실패했다는 이벤트가 발생하면 바로 위의 액션 실행