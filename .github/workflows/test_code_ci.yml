name: Test Code CI

on:
    pull_request:
        branches: [feature/ci]

jobs:
    build:
        runs-on: ubuntu-latest
        services:
            mysql:
                image: mysql:5.7
                env:
                    MYSQL_USER: test
                    MYSQL_PASSWORD: test
                    MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
                    MYSQL_DATABASE: ywc
                ports:
                    - 3306:3306

        strategy:
            matrix:
                node-version: [18.x]
        steps:
            - uses: actions/checkout@v2
            - name: Use Node.js $
              uses: actions/setup-node@v2
              with:
                  node-version: 18.x
            - name: MySQL connection
              run: |
                  mkdir logs
                  mysql --version
                  sudo apt-get install -y mysql-client
                  sudo service mysql start
                  mysql -u root -proot -e "CREATE DATABASE ywc"
                  mysql -u root -proot ywc < data.sql
                  mysql -u root -proot -e "SHOW DATABASES"
            - name: env 파일 셋팅
              uses: SpicyPizza/create-envfile@v2
              with:
                  envkey_MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
                  envkey_MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
                  envkey_MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
                  envkey_MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
                  envkey_MYSQL_SCHEMA: ${{ secrets.MYSQL_SCHEMA }}
                  envkey_APP_NAME: ${{ secrets.APP_NAME }}
                  envkey_APP_PORT: ${{ secrets.APP_PORT }}
                  envkey_APP_CORS_ORIGINS: ${{ secrets.APP_CORS_ORIGINS }}
                  envkey_APP_WEB_URL: ${{ secrets.APP_WEB_URL }}
                  file_name: .env.test
            - name: install node modules && test
              run: |
                  npm install
                  npm test
              env:
                  CI: true
            - name: if fail
              uses: actions/github-script@v3
              with:
                  github-token: ${{ secrets.GIT_TOKEN }}
                  script: |
                      const ref = "test/ci";
                      const pull_number = Number(ref.split("/")[2]);
                      if (!isNaN(pull_number)) {
                        const { data: reviews } = await github.pulls.listReviews({
                          ...context.repo,
                          pull_number,
                        });
                        const existingReview = reviews.find((review) => review.user.login === 'github-actions[bot]');
                        if (existingReview) {
                          await github.pulls.createReview({
                            ...context.repo,
                            pull_number,
                            review_id: existingReview.id,
                            body: '코드를 다시 확인해주세요.',
                            event: 'REQUEST_CHANGES',
                          });
                        }
                        await github.pulls.update({
                          ...context.repo,
                          pull_number,
                          state: 'closed',
                        });
                      }
